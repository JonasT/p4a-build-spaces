
# Prepare user environment:
RUN apt install -y psmisc bash sudo
RUN /bin/echo -e '\nBASH_ENV="~/.additional_env"\n' >> /etc/environment
ENV BASH_ENV="~/.additional_env"
RUN mkdir -p /home/userhome/
{PREPARE_USER}

# Workspace folder (if used, otherwise the following line will be blank):
{WORKSPACE_VOLUME}

# Volume for output:
VOLUME /home/userhome/output

# Set start directory:
WORKDIR {START_DIR}

# Drop privileges:
{DROP_TO_USER}

# Install shared user packages:
{INSTALL_SHARED_PACKAGES_USER}

# Get the kivy test app:
RUN mkdir -p /tmp/test-app/ && cd /tmp/test-app && git clone https://github.com/kivy/python-for-android/ .
RUN cp -R /tmp/test-app/testapps/testapp_keyboard/ /home/userhome/testapp-sdl2-keyboard/
RUN cp -R /tmp/test-app/testapps/testapp_flask/ /home/userhome/testapp-webview-flask/
RUN cp -R /tmp/test-app/testapps/testapp_nogui/ /home/userhome/testapp-service_only-nogui/

# Final command line preparation:
RUN echo '{LAUNCH_CMD}' > /tmp/launchcmd.txt
RUN /bin/echo -e '#!/usr/bin/python3\n\
import json\n\
import os\n\
print("echo \"\"")\n\
print("echo \"  *** WELCOME to p4a-build-spaces ***\"\\n")\n\
print("echo \"\"\\n")\n\
print("echo \"To build a kivy demo app, use this command:\"")\n\
print("echo \"\"\\n")\n\
init_file = ""\n\
if os.environ["PIP"] == "pip2":\n\
    demoapp_line = "echo \"$ cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python2 --private .\"\\n"\n\
    print(demoapp_line)\n\
    init_file += "shopt -s expand_aliases\\n"\n\
    init_file += "alias testbuild=\"cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python2 --private . && cp *.apk ~/output\"\\n"\n\
    init_file += "alias testbuild_webview=\"cd ~/testapp-webview-flask && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap webview --requirements=python2,flask --private . && cp *.apk ~/output\"\\n"\n\
    init_file += "alias testbuild_service_only=\"cd ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python2 --private . && cp *.apk ~/output\"\\n"\n\
else:\n\
    demoapp_line = "echo \"$ cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python3 --private .\"\\n"\n\
    print(demoapp_line)\n\
    init_file += "shopt -s expand_aliases\\n"\n\
    init_file += "alias testbuild=\"cd ~/testapp-sdl2-keyboard && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --requirements=kivy,python3 --private . && cp *.apk ~/output\"\\n"\n\
    init_file += "alias testbuild_webview=\"cd ~/testapp-webview-flask && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap webview --requirements=python3,flask --private . && cp *.apk ~/output\"\\n"\n\
    init_file += "alias testbuild_service_only=\"cd ~/testapp-service_only-nogui && p4a apk --arch=armeabi-v7a --name test --package com.example.test --version 1 --bootstrap service_only --requirements=pyjnius,python3 --private . && cp *.apk ~/output\"\\n"\n\
print("echo \"\"\\n")\n\
print("echo \"... or use the shortcut alias \\`testbuild\\`!\"\\n")\n\
print("echo \"\"\\n")\n\
with open("/tmp/launchcmd.txt", "r") as f:\n\
    import shlex\n\
    args = shlex.split(f.read().strip())\n\
    print("CMD=()")\n\
    i = -1\n\
    for arg in args:\n\
        i += 1\n\
        print("CMD[" + str(i) + "]=" + shlex.quote(arg))\n\
vars = ["ANDROIDAP='$ANDROIDAPI'",\n\
    "ANDROIDNDKVER='$NDKVER'",\n\
    "NDKAPI='$NDKAPI'",\n\
    "HOME=/home/userhome",\n\
    "GRADLE_OPTS=\"-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.compiler.execution.strategy=in-process -Xms512m -Xmx1024m -Dorg.gradle.jvmargs='"'"'-Xms512m -Xmx1024m'"'"'\"",\n\
    "JAVA_OPTS=\"-Xms512m -Xmx1024m\"",\n\
    "TESTPATH=\"$PATH:/home/userhome/.local/bin\"",\n\
    "PATH=\"$PATH:/home/userhome/.local/bin\"",\n\
    "ANDROIDSDK=/sdk-install/ ANDROIDNDK=\"'$NDKDIR'\"",\n\
    ]\n\
with open(os.path.expanduser("~/.pam_environment"), "a", encoding="utf-8") as f1:\n\
    f1.write("\\n" + "\\n".join([\n\
        var.partition("=")[0] + " DEFAULT=" +\n\
        var.partition("=")[2] for var in vars]))\n\
with open(os.path.expanduser("~/.bash_profile"), "a", encoding="utf-8") as f2:\n\
    f2.write("\\n" + init_file + "\\n")\n\
    f2.write("\\n" + "\\nexport ".join(vars) + "\\n")\n\
with open(os.path.expanduser("~/.profile"), "a", encoding="utf-8") as f2:\n\
    f2.write("\\n" + "\\nexport ".join(vars) + "\\n")\n\
with open(os.path.expanduser("~/.bashrc"), "a", encoding="utf-8") as f2:\n\
    f2.write("\\n" + init_file + "\\n")\n\
    f2.write("\\n" + "\\nexport ".join(vars) + "\\n")\n\
with open(os.path.expanduser("~/.additional_env"), "a", encoding="utf-8") as f3:\n\
    f3.write("\\n" + "\\nexport ".join(vars) + "\\n")' > /tmp/cmdline.py

# Actual launch script:
RUN /bin/echo -e '#!/bin/sh\n\
python3 /tmp/cmdline.py > /tmp/launch-prepare.sh\n\
source /tmp/launch-prepare.sh\n\
exec -- ${CMD[@]}' > /tmp/launch.sh

CMD ["bash", "/tmp/launch.sh"]

